################################################################################
# TASK 6: collect and clean data
################################################################################
#open prepocessed world bank death data
death.data <- read_csv("WorldBankDeathData.csv")
view(death.data)
#modify data to keep country, country code, and year 2022
death.data.2022 <- death.data |>
select("Country Name", "Country Code", "2022")
view(death.data.2022)
?modify
#convert number of death per 1000 citizens to a rate to support beta distribution
death.data.2022 <- death.data.2022|>
modify(2022, death.data.2022$"2022"/1000)
view(death.data.2022)
#modify data to keep country, country code, and year 2022
death.data.2022 <- death.data |>
select("Country Name", "Country Code", "2022")
view(death.data.2022)
#convert number of death per 1000 citizens to a rate to support beta distribution
death.data.2022 <- death.data.2022|>
modify("2022", death.data.2022$"2022"/1000)
death.data.2022
view(death.data.2022)
#convert number of death per 1000 citizens to a rate to support beta distribution
death.data.2022 <- death.data.2022|>
mutate("2022", death.data.2022$"2022"/1000)
#modify data to keep country, country code, and year 2022
death.data.2022 <- death.data |>
select("Country Name", "Country Code", "2022")
#convert number of death per 1000 citizens to a rate to support beta distribution
death.data.2022 <- death.data.2022|>
mutate("2022", death.data.2022$"2022"/1000)
view(death.data.2022)
#convert number of death per 1000 citizens to a rate to support beta distribution
death.data.2022 <- death.data.2022|>
mutate(2022, death.data.2022$"2022"/1000)
view(death.data)
view(death.data.2022)
#modify data to keep country, country code, and year 2022
death.data.2022 <- death.data |>
select("Country Name", "Country Code", "2022")
#convert number of death per 1000 citizens to a rate to support beta distribution
death.data.2022 <- death.data.2022|>
mutate(2022, death.data.2022$"2022"/1000)
view(death.data.2022)
#modify data to keep country, country code, and year 2022
death.data.2022 <- death.data |>
select("Country Name", "Country Code", "2022")
view(death.data.2022)
#convert number of death per 1000 citizens to a rate to support beta distribution
death.data.2022 <- death.data.2022|>
mutate(2022, death.data.2022$"2022"/1000)
view(death.data.2022)
#modify data to keep country, country code, and year 2022
death.data.2022 <- death.data |>
select("Country Name", "Country Code", "2022")
#convert number of death per 1000 citizens to a rate to support beta distribution
death.data.2022 <- death.data.2022|>
mutate(2022 = death.data.2022$"2022"/1000)
view(death.data.2022)
?mutate
#modify data to keep country, country code, and year 2022
death.data.2022 <- death.data |>
select("Country Name", "Country Code", "2022")
#convert number of death per 1000 citizens to a rate to support beta distribution
death.data.2022 <- death.data.2022|>
mutate("2022" = death.data.2022$"2022"/1000)
view(death.data.2022)
################################################################################
# TASK 6: collect and clean data
################################################################################
#open prepossessed world bank death data
death.data <- read_csv("WorldBankDeathData.csv")
#modify data to keep country, country code, and year 2022
death.data.2022 <- death.data |>
select("Country Name", "Country Code", "2022")
#convert number of death per 1000 citizens to a rate to support beta distribution
death.data.2022 <- death.data.2022|>
mutate("2022" = death.data.2022$"2022"/1000) #divide each death rate by 1000
view(death.data.2022)
################################################################################
# TASK 7: what are alpha and beta?
################################################################################
#get data for moments estimate
data.moments.estimate <- death.data.2022$"2022"
data.moments.estimate
################################################################################
# TASK 7: what are alpha and beta?
################################################################################
#get data for moments estimate
data.2022 <- death.data.2022$"2022"
#compute method of moments estimates
MOM.beta <- function(data, par){
alpha <-par[1] #get alpha and beta
beta <- par[2]
#compute the first moment
EX1 = alpha/(alpha+beta)
m1 <- mean(data.2022)
#compute the second moment
EX2 = (alpha+1)*alpha/((alpha+beta+1)*(alpha+beta))
m2 <-
to.return <- c(EX1-m1, EX2-m2) #both sides of each of two moments should be equal
return(to.return) # Goal: find alpha and beta so both of there parameters are 0
}
library(nleqslv)
d<-c(1,2,3,4,5)
mean9d)
mean(d)
mean(d^2)
?nlegslv
library(nleqslv)
library(nleqslv)
?nleqslv
################################################################################
# TASK 7: what are alpha and beta?
################################################################################
#get data for moments estimate
data.2022 <- death.data.2022$"2022"
#compute method of moments estimates
MOM.beta <- function(data, par){
alpha <-par[1] #get alpha and beta
beta <- par[2]
#compute the first moment
EX1 = alpha/(alpha+beta)
m1 <- mean(data)
#compute the second moment
EX2 = (alpha+1)*alpha/((alpha+beta+1)*(alpha+beta))
m2 <- mean(data^2)
to.return <- c(EX1-m1, EX2-m2) #both sides of each of two moments should be equal
return(to.return) # Goal: find alpha and beta so both of there parameters are 0
}
nleqslv(x = c(2, 5), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = death.data.2022$"2022")
nleqslv(x = c(1, 1), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = death.data.2022$"2022")
################################################################################
# TASK 7: what are alpha and beta?
################################################################################
#get data for moments estimate
data.2022 <- death.data.2022$"2022"
#compute method of moments estimates
MOM.beta <- function(data, par){
alpha <-par[1] #get alpha and beta
beta <- par[2]
#compute the first moment
EX1 = alpha/(alpha+beta)
m1 <- mean(data)
#compute the second moment
EX2 = (alpha+1)*alpha/((alpha+beta+1)*(alpha+beta))
m2 <- mean(data^2)
to.return <- c(EX1-m1, EX2-m2) #both sides of each of two moments should be equal
return(to.return) # Goal: find alpha and beta so both of there parameters are 0
}
nleqslv(x = c(1, 1), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = data.2022)
nleqslv(x = c(2, 1), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = data.2022)
nleqslv(x = c(10, 15), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = data.2022)
nleqslv(x = c(2, 5), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = data.2022)
data.2022
nleqslv(x = c(0.001, 0.1), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = data.2022)
#compute method of moments estimates
MOM.beta <- function(data, par){
alpha <-par[1] #get alpha and beta
beta <- par[2]
#compute the first moment
EX1 = alpha/(alpha+beta)
m1 <- mean(data)
#compute the second moment
EX2 = ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m2 <- mean(data^2)
to.return <- c(EX1-m1, EX2-m2) #both sides of each of two moments should be equal
return(to.return) # Goal: find alpha and beta so both of there parameters are 0
}
nleqslv(x = c(0.001, 0.1), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = data.2022)
data.2022
#compute method of moments estimates
MOM.beta <- function(data, par){
alpha <-par[1] #get alpha and beta
beta <- par[2]
#compute the first moment
EX1 = alpha/(alpha+beta)
m1 <- mean(data, na.rm=T)
#compute the second moment
EX2 = ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m2 <- mean(data^2, na.rm=T)
to.return <- c(EX1-m1, EX2-m2) #both sides of each of two moments should be equal
return(to.return) # Goal: find alpha and beta so both of there parameters are 0
}
nleqslv(x = c(0.1, 0.1), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = data.2022)
#compute method of moments estimates
MOM.beta <- function(data, par){
alpha <-par[1] #get alpha and beta
beta <- par[2]
#compute the first moment
EX1 = alpha/(alpha+beta)
m1 <- mean(data, na.rm=T)
#compute the second moment
EX2 = ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m2 <- mean(data^2, na.rm=T)
to.return <- c(EX1-m1, EX2-m2) #both sides of each of two moments should be equal
return(to.return) # Goal: find alpha and beta so both of there parameters are 0
}
nleqslv(x = c(8, 1000), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = data.2022)
?dbeta
#compute maximum likelihood estimates
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1] #get alpha and beta
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
optim(par = 2,
fn = llbeta,
data=data.2022,
method = "Brent",
lower = 0,
upper = 10,
neg = T)
#compute maximum likelihood estimates
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1] #get alpha and beta
beta <- par[2]
loglik <- sum(log(dbeta(x=na.omit(data), shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
optim(par = 2,
fn = llbeta,
data=data.2022,
method = "Brent",
lower = 0,
upper = 10,
neg = T)
warnings()
#compute maximum likelihood estimates
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1] #get alpha and beta
beta <- par[2]
loglik <- sum(log(dbeta(x=na.omit(data), shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
optim(par = 2,
fn = llbeta,
data=data.2022,
method = "Brent",
lower = 0,
upper = 10,
neg = T)
#compute maximum likelihood estimates
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1] #get alpha and beta
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta, na.rm = T)))
return(ifelse(neg, -loglik, loglik))
}
optim(par = 2,
fn = llbeta,
data=data.2022,
method = "Brent",
lower = 0,
upper = 10,
neg = T)
################################################################################
# TASK 7: what are alpha and beta?
################################################################################
#get data for moments estimate
data.2022 <- na.omit(death.data.2022$"2022")
data.2022
#compute maximum likelihood estimates
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1] #get alpha and beta
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
optim(par = 2,
fn = llbeta,
data=data.2022,
method = "Brent",
lower = 0,
upper = 10,
neg = T)
data.2022
################################################################################
# TASK 7: what are alpha and beta?
################################################################################
#get data for moments estimate
data.2022 <- death.data.2022$"2022"
#compute method of moments estimates
MOM.beta <- function(data, par){
alpha <-par[1] #get alpha and beta
beta <- par[2]
#compute the first moment
EX1 = alpha/(alpha+beta)
m1 <- mean(data, na.rm=T)
#compute the second moment
EX2 = ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m2 <- mean(data^2, na.rm=T)
to.return <- c(EX1-m1, EX2-m2) #both sides of each of two moments should be equal
return(to.return) # Goal: find alpha and beta so both of there parameters are 0
}
nleqslv(x = c(8, 1000), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = data.2022)
?optim
optim(par = 2,
fn = llpois,
data=dat.ms$Relapsein2y,
method = "Brent",
lower = 0,
upper = Inf,
neg = T)
optim(par = 2,
fn = llpois,
data=dat.ms$Relapsein2y,
method = "Brent",
lower = 0,
upper = 20,
neg = T)
optim(par = 2,
fn = llbeta,
data=data.2022,
method = "Brent",
lower = 0,
upper = 20,
neg = T)
################################################################################
# TASK 7: what are alpha and beta?
################################################################################
#get data for moments estimate
data.2022 <- death.data.2022$"2022"
data.2022 <- data.2022[!is.na(data.2022)] #remove NA in data
data.2022
#compute method of moments estimates
MOM.beta <- function(data, par){
alpha <-par[1] #get alpha and beta
beta <- par[2]
#compute the first moment
EX1 = alpha/(alpha+beta)
m1 <- mean(data, na.rm=T)
#compute the second moment
EX2 = ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m2 <- mean(data^2, na.rm=T)
to.return <- c(EX1-m1, EX2-m2) #both sides of each of two moments should be equal
return(to.return) # Goal: find alpha and beta so both of there parameters are 0
}
nleqslv(x = c(8, 1000), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = data.2022)
#compute maximum likelihood estimates
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1] #get alpha and beta
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
optim(par = 2,
fn = llbeta,
data=data.2022,
method = "Brent",
lower = 0,
upper = 20,
neg = T)
optim(par = 2,
fn = llbeta,
data=data.2022,
method = "Brent",
lower = 0,
upper = 1,
neg = T)
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
method = "Brent",
lower = 0,
upper = 1,
neg = T)
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
method = "SANN", #"Brent"
lower = 0,
upper = 1,
neg = T)
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
method = "L-BFGS-B", #"Brent"
lower = 0,
upper = 1,
neg = T)
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
method = "Brent", #"Brent"
lower = 0,
upper = 1,
neg = T)
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
method = "BFGS",
lower = 0,
upper = 1,
neg = T)
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
method = "Brent",
lower = 0,
upper = 1,
neg = T)
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
method = "Brent",
lower = 0,
upper = 1,
neg = F)
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
method = "Brent",
lower = 0,
upper = 1,
neg = T)
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
neg = T)
optim(par = c(8, 950),
fn = llbeta,
data=data.2022,
neg = T)
optim(par = c(8, 950),
fn = llbeta,
data=data.2022,
neg = F)
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
neg = F)
nleqslv(x = c(8, 1000), #vector for the initial guess of alpha and beta
fn = MOM.beta,
data = data.2022)
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
neg = F)
#compute maximum likelihood estimates
llbeta <- function(data, par, neg=FALSE){
alpha <- par[1] #get alpha and beta
beta <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)))
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
neg = T)
optim(par = c(8, 1000),
fn = llbeta,
data=data.2022,
neg = T,
message = NULL)
#plot a histogram of data
ggplot(data = data.2022)+
geom_histogram(aes(x = data.2022))
view(death.data)
#plot a histogram of data
ggplot(data = death.data.2022)+
geom_histogram(aes(x = 2022, y = "Country Name"))
#plot a histogram of data
ggplot(data = death.data.2022)+
geom_histogram(aes(x = "2022", y = "Country Name"))
#plot a histogram of data
ggplot(data = death.2022)+
geom_histogram()
#plot a histogram of data
ggplot(data = data.2022)+
geom_histogram()
#plot a histogram of data
ggplot(data = tibble(data.2022))+
geom_histogram()
#plot a histogram of data
ggplot(data = tibble(data.2022))+
geom_histogram(x = data.2022)
#plot a histogram of data
ggplot()+
geom_histogram(data = tibble(data.2022),
aes(x = data.2022, y = after_stat(data.2022)))
#plot a histogram of data
ggplot()+
geom_histogram(data = tibble(data.2022),
aes(x = data.2022, y = after_stat(density)))
